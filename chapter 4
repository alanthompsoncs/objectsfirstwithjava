Exercise 4.1

Exercise 4.2
Nothing happens. There is no else block in the removeFile method so nothing will be returned.

Exercise 4.3
The second file name is displayed. Due to the first file name being removed from memory, it is replaced with the second file name in the first file name's index.

Exercise 4.4
private ArrayList<Book> library;

Exercise 4.5
ArrayList<Student> cs101;

Exercise 4.6
private ArrayList<MusicTrack> tracks;

Exercise 4.7
library = new ArrayList<Book>();
cs101 = new ArrayList<Student>();
tracks = new ArrayList<MusicTrack>();

library = new ArrayList<>();
cs101 = new ArrayList<>();
tracks = new ArrayList<>();

Exercise 4.8
10 - 1 = 9

Exercise 4.9
items.get(4);

Exercise 4.10
15 - 1 = 14

Exercise 4.11
files.add(favouriteTrack);

Exercise 4.12
dates.remove(2);

Exercise 4.13
Index 5 (removing index 9 does not change the position)

Exercise 4.14
public void checkIndex(int index)
{
    if(index < 0 || index > (files.size() - 1))
    {
        System.out.println("Error, the index must be between 0 and " + (files.size() - 1));
    }
}

No, this method only works if the number of files is greater than 0.

Exercise 4.15
public boolean validIndex(int index)
{
    if(index >= 0 && index < (files.size() - 1))
    {
        return true;
    }
    else
    {
        return false;
    }
}

This method only works if the number of files is greater than 1.

Exercise 4.16

Exercise 4.17
Files that are not inputted as "../audio/filname.mp3" return an error with a NullPointerException

Exercise 4.18
public void listAllFiles()
{
   int index = 0;
   while(index < files.size())
   {
        String filename = files.get(index);
        System.out.println(filename);
        index += 1;
    }
The listAllFiles method does not need a return type because it will simply print the files in the array
It does not need to take any parameters because we can get the file size from files.size

Exercise 4.19
No, the number of files increases every time the addSong method is called so there would be an indeterminate number of System.out.println lines

Exercise 4.20
public void listAllFiles()
{
    for(String filename : files) {
        System.out.println(filename);
    }
}

Exercise 4.21

Exercise 4.22

Exercise 4.23

Exercise 4.24

Exercise 4.25
Nothing is printed when a search string does not match any file names

Exercise 4.26
public void playSample(String searchString)
{
    for(String filename : files) {
        if(filename.contains(searchString)) {
            // A match.
            player.playSample(filename);
        }
        else
        {
            System.out.println("No matches");
        }
    }
}

Exercise 4.28
public void processTracks(String trackName)

Exercise 4.29

Exercise 4.30
public void multiplesOfFive()
{
    int number = 0;
    while(number <= 95)
    {
        number += 5;
        System.out.println(number);
    }

}

Exercise 4.31
public void addTen()
{
    int number = 1;
    int total = 0;
    while(number <= 10)
    {
        total += number;
        number++;
    }
}

Exercise 4.32
public void sum(int a, int b)
{
    int current = a + 1;
    int total = 0;
    while(current < b)
    {
        total += current;
        current++;
    }
}

Exercise 4.33

Exercise 4.34

Exercise 4.35
// Number of times a song has been played
private int playCount;

private void increasePlayCount()
{
    playCount += 1;
}

private void resetPlayCount()
{
    playCount = 0;
}

Exercise 4.36
Field:
private Track count;

Constructor:
count = new Track("");

playTrack Method:
public void playTrack(int index)
{
    if(indexValid(index)) {
        Track track = tracks.get(index);
        player.startPlaying(track.getFilename());
        System.out.println("Now playing: " + track.getArtist() + " - " + track.getTitle());
        count.increasePlayCount();
    }
}

Exercise 4.37

Exercise 4.38
Field:
private boolean playing;

Constructor:
playing = false;

public void playTrack(int index)
{
    if(indexValid(index) && !playing) {
        Track track = tracks.get(index);
        player.startPlaying(track.getFilename());
        System.out.println("Now playing: " + track.getArtist() + " - " + track.getTitle());
        count.increasePlayCount();
        playing = true;
    }
}

public void stopPlaying()
{
    player.stop();
    playing = false;
}

Exercise 4.39
public void removeTracks(String word)
{
    Iterator<Track> it = tracks.iterator();
    while(it.hasNext())
    {
        Track t = it.next();
        String title = t.getTitle();
        if(title.contains(word))
        {
            it.remove();
        }
    }
}

Exercise 4.40
Exercise 4.41
Exercise 4.42
Exercise 4.43
Exercise 4.44
Exercise 4.45
Exercise 4.46
Exercise 4.47

