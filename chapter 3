Exercise 3.1
Object diagram: LabClass (contains its own fields, plus one field that contains the student objects) <- 3x Student objects (each containing fields)

Class diagram: LabClass -> 3x Student objects

Exercise 3.2
When a class is created or deleted - since a class can be a field type, if a method changes that field then the class will change

Exercise 3.3
When an object is added or removed - since fields can hold objects, if a method changes that field then the object will change

Exercise 3.4
private Instructor tutor;

Exercise 3.5
NumberDisplay hours = new NumberDisplay(24);
hours.increment();
hours.increment();
hours.increment();
hours.increment();
hours.increment();
hours.increment();
hours.increment();
hours.increment();
hours.increment();
hours.increment();
hours.increment();
hours.increment();
hours.increment();
hours.increment();
hours.increment();
hours.increment();
hours.increment();
hours.increment();
hours.increment();
hours.increment();
hours.increment();
hours.increment();
hours.increment();
hours.increment();

Exercise 3.6
NumberDisplay minutes = new NumberDisplay(60);
The method calls are the object name (hours and minutes)
The number of increments needs to be counted to ensure the hours object rolls over once the minutes object reaches a value of 60

Exercise 3.7
NumberDisplay nd = new NumberDisplay(6);
nd.getValue() = 0 (int)
nd.setValue(6)
nd.increment()
nd.increment()
nd.increment()
nd.increment()
nd.increment()
nd.getValue() = 5 (int)
nd.increment()
nd.getValue() = 0 (int)

Exercise 3.8
Error: non-static method getValue() cannot be referenced from a static context

Exercise 3.9
Error: '.class' expected
nd.setValue(5);
The method is expecting an int as the parameter but a String was provided

Exercise 3.10
Nothing will happen if the setValue method is called with an illegal value (there is no else block)
Inserting the following else block is a good solution:
else
{
    System.out.println("Error, the replacement value must be between 0 and " + (limit - 1));
}

Exercise 3.11
Nothing will happen if the setValue method is called with a value of 0

Exercise 3.12
|| is the 'or' logical operator, so there are no illegal numbers (apart from the limits of int)

Exercise 3.13
! false = true (! is the 'not' logical operator)

Exercise 3.14
(a && b = true) || (a && b = false)

Exercise 3.15
(a = true && b = false) || (a = false && b = true)

Exercise 3.16
(a == b)

Exercise 3.17
Yes, as long as the limit is within the bounds of int

Exercise 3.18
No, since "" is an empty String, both expressions will return value as a String

Exercise 3.19
9 + 3 + "cat" = 12cat (the expression is converted to a String after 9 + 3)
"cat" + 3 + 9 = cat39 (the expression is converted to a String before 9 + 3)

Exercise 3.20
The modulo operator produces the remainder of integer division i.e. 10 % 3 = 1 (10 / 3 = 3 remainder 1)

Exercise 3.21
8 % 3 = 2

Exercise 3.22
When the numerator is positive and the denominator is negative, the modulo operator returns a positive number
When the numerator is negative and the denominator is positive, the modulo operator returns a negative number

Exercise 3.23
1, 2, 3, 4, 0

Exercise 3.24
0, 1, 2, 3, 4, 5, 6, 7, 8, 9

Exercise 3.25
When the increment method is executed, value is assigned (value + 1) modulo limit
value will keep increasing by 1 until limit is reached, where it will start back at value = 0

Exercise 3.26
public void increment()
{
    if (value < (limit - 1))
    {
        value += 1;
    }
    else
    {
        value = 0;
    }
}
The modulo operator method is better

Exercise 3.27
The constructor creates an object that sets the value of hours to type NumberDisplay (limit of 24) and minutes to type NumberDisplay (limit of 60)
The constructor also calls the updateDisplay method, which assigns displayString the hours value and the minutes value
When getTime is called, it returns displayString, which is equal to the values set when the object was created

Exercise 3.28
The displayString increases by 1 minute when the timeTick method is called
The displayString changes to the time inputted when the setTime method is called

Exercise 3.29
timeTick would need to be called abs(60 - hour * 60 - minute) times to make ClockDisplay show 01:00
The method setTime could be called with inputs hour = 1 and minute = 0 to display that time

Exercise 3.30
private Rectangle window;

window = new Rectangle(2, 2);

Exercise 3.31
The second ClockDisplay constructor creates new ClockDisplay objects using the NumberDisplay class
The constructor has two parameters (hour and minute)
The value of hour is set to the NumberDisplay object with rollOverLimit of 24
The value of minute is set to the NumberDisplay object with rollOverLimit of 60
The constructor then calls the setTime method with parameters hour and minute
The setTime method sets the hours field with the value of hour using the setTime method from the NumberDisplay class
The setTime method sets the minutes field with the value of minute using the setTime method from the NumberDisplay class
The setTime method then calls the updateDisplay method which returns the String getDisplayValue for hours and minutes

Exercise 3.32
Similarities:
Both constructors create objects from the NumberDisplay class
Both constructors update the display with the updateDisplay method
Differences:
The first constructor does not set the time

Exercise 3.33
p1.print("file", true);
p1.getStatus(5);

Exercise 3.34
The constructor of class Picture creates object types Square, Triangle, Circle

Exercise 3.35
roof.changeSize(60, 180);
roof.moveHorizontal(20);
roof.moveVertical(-60);
roof.makeVisible();

Exercise 3.36
No, the Picture class does not have any internal method calls

Exercise 3.37
window.changeColor("black"); & sun.changeColor("yellow"); changed to setColor();

Exercise 3.38
The rollOverLimit of the hours fields of the ClockDisplay constructors chaged to 12
New method created in the NumberDisplay class:
    public void increment2()
    {
        if (value == 11)
        {
            value = 12;
        }
        else
        {
            value = (value + 1) % limit;
        }
    }

The method timeTick changed to the following:
public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  // it just rolled over!
            hours.increment2();
        }
        updateDisplay();
    }

Exercise 3.39

Exercise 3.40
public class Tree
{
    private Triangle leaves;
    private Square trunk;

    public Tree()
    {
        leaves = new Tree();
        trunk = new Tree();
    }
}

Exercise 3.41
public class Tree
{
    private Triangle leaves;
    private Square trunk;

    public Tree()
    {
        leaves = new Triangle();
        trunk = new Square();        
    }
    
    public void setup()
    {
        trunk.moveHorizontal(-130);
        trunk.moveVertical(100);
        leaves.changeSize(120,140);
        trunk.makeVisible();
        leaves.makeVisible();
    }
}

Exercise 3.42

Exercise 3.43
MailClient <- MailServer <- MailUser

Exercise 3.44

Exercise 3.45

Exercise 3.46

Exercise 3.47
The next line that will execute is item.print();
The item field is not null (a message was sent from Sophie to Juan) so item.print(); will execute

Exercise 3.48
"No new mail." was printed
The MailServer class removes the message once it is printed, therefore "No new mail." is printed

Exercise 3.49
The Debugger displays the item.print(); method i.e. it highlights the System.out.println("From: " + from); line

Exercise 3.50
