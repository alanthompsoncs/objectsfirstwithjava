Exercise 6.1

Exercise 6.2
Each class documentation lists the fields, constructors and methods
The purpose of each section is to explain how to initialise the field / constructor / method, then describe what it does
The String class has many more methods than other classes

Exercise 6.3
Version 1 - startsWith(String prefix) - tests if this string starts with the specified prefix (boolean)
Version 2 - startsWith(String prefix, int toffset) - tests if the substring of this string beginning at the specified index starts with the specified prefix (boolean)

Exercise 6.4
endsWithâ€‹(String suffix) - Tests if this string ends with the specified suffix (boolean)

Exercise 6.5
length() - Returns the length of this string (int)

Exercise 6.6
Word search in the documentation
It was hard to find some of the methods because you need to input the right keywords
However, the methods are in alphabetical order which makes it a little easier to find things

Exercise 6.7
public String trim()
text.trim();

Exercise 6.8
start method changed to the following:
    public void start()
    {
        boolean finished = false;

        printWelcome();

        while(!finished) {
            String input = reader.getInput().trim();

            if(input.startsWith("bye")) {
                finished = true;
            }
            else {
                String response = responder.generateResponse();
                System.out.println(response);
            }
        }

        printGoodbye();
    }

Exercise 6.9
start method changed to the following:
    public void start()
    {
        boolean finished = false;

        printWelcome();

        while(!finished) {
            String input = reader.getInput().trim().toLowerCase();

            if(input.startsWith("bye")) {
                finished = true;
            }
            else {
                String response = responder.generateResponse();
                System.out.println(response);
            }
        }

        printGoodbye();
    }

Exercise 6.10
boolean

Exercise 6.11
start method changed to the following:
    public void start()
    {
        boolean finished = false;

        printWelcome();

        while(!finished) {
            String input = reader.getInput().trim().toLowerCase();

            if(input.equals("bye")) {
                finished = true;
            }
            else {
                String response = responder.generateResponse();
                System.out.println(response);
            }
        }

        printGoodbye();
    }

Exercise 6.12
The Random class is in the java.util package. It is used to generate a stream of pseudo-random numbers.
Random() creates a new random number generator
random.ints() returns an unlimited stream of pseudorandom int values

Exercise 6.13
Random random = new Random();
int randNumber = random.ints();

Exercise 6.14
public void printOneRandom()
{
     System.out.println(random.nextInt());
}
    
public void printMultiRandom(int howMany)
{
     for (int i = 1; i <= howMany; i++)
    {
            System.out.println(random.nextInt());        
    }

}

Exercise 6.15
The possible numbers when nextInt(100) is called is 0 to 99

Exercise 6.16
    public void throwDie()
    {
        System.out.println(random.nextInt(6) + 1);
    }

Exercise 6.17
    public void getResponse()
    {
        switch (random.nextInt(3))
        {
            case 0:
                System.out.println("yes");
                break;
            case 1:
                System.out.println("no");
                break;
            case 2:
                System.out.println("maybe");
                break;
        }
    }

Exercise 6.18
    public String getResponse()
    {
        int i = 0;
        while (i < random.nextInt(10))
        {
            switch (random.nextInt(3))
            {
                case 0:
                    list.add("yes");
                    break;
                case 1:
                    list.add("no");
                    break;
                case 2:
                    list.add("maybe");
                    break;
            }
        }
        return list.get(random.nextInt(list.size()));
    }

Exercise 6.19
public int getResponse3(int max)
{
    return random.nextInt(max + 1);    
}

Exercise 6.20
public int getNumberMinMax(int min, int max)
{
    return random.nextInt(max - min + 1) + min;
}

Exercise 6.21
Yes, the SecureRandom class can be used to generate random numbers like the Random class
Random numbers are important for cryptographic security so random codes can be used to protect sensitive information

Exercise 6.22

Exercise 6.23
The response generator will still work if fewer or more responses are added to the responses list
The generator is based on the size of the ArrayList so it does not matter how many entries there are

Exercise 6.24
HashMaps store items in key / value pairs that can be accessed with an index of another type e.g. String
One object is used as a key (index) to another object (value)
HashMap<String, String> capitalCities = new HashMap<String, String>();
capitalCities.put("England", "London");

Exercise 6.25
compute, computeIfAbsent, computeIfPresent, entrySet, get, keySet, merge, put, putAll, remove, Collection
Yes, the same type can be used for both parameters because items are listed based on the parameter itself

Exercise 6.26
The number of entries in a HashMap can be found with the size() method

Exercise 6.27
import java.util.HashMap;

public class MapTester
{
    private HashMap<String, String> contacts;

    public MapTester()
    {
        contacts = new HashMap<String, String>();
    }

    public void enterNumber(String name, String number)
    {
        contacts.put(name, number);
    }
    
    public String lookupNumber(String name)
    {
        return contacts.get(name);
    }
}

Exercise 6.28
When a value is added to a key that already exists, the existing value is replaced with the new value

Exercise 6.29
When two different keys with the same value are added to a HashMap, the same value is stored in each key

Exercise 6.30
public boolean keyCheck(String key)
{
    return contacts.containsKey(key);
}

Exercise 6.31
If a HashMap does not contain a key, then the containsKey() method will return false (boolean)

Exercise 6.32
To print all the keys in a HashMap, use the keySet() method:

public void allKeys()
{
    System.out.println(contacts.keySet().toString());
}

Exercise 6.33
public String pickDefaultResponse()
{
    int index = randomGenerator.nextInt(responseMap.size());
    return responseMap.get(index);
}

Exercise 6.34
A HashSet is a collection of items where every item is unique, where an ArrayList is a resizable array
An item can only appear once in a HashSet, where it can appear multiple times in an ArrayList

Exercise 6.35
The split method can separate a String into different components, based on a separator
e.g. split (" ") of "This is a string" would be {"This", "is", "a", "string"}
The split method removes the separator when executed, even if there are multiple iterations of the separator
e.g. split("d") of "Pudding" would be {"Pu", "ing"}

Exercise 6.36
split a space = split(" ")
split a tab = split("\t")
split a colon = split(":")

Exercise 6.37
The get(int index) method for an ArrayList returns the element at index
The contains(Object o) method for a HashSet returns true or false if the element exists

Exercise 6.38
If there is more than 1 space in a String, then split() will remove all spaces before splitting the elements

Exercise 6.39

Exercise 6.40
compare() - compares 2 object arrays
copyOf() - copies the specified array
copyOfRange() - copies the specified range of the specified array
equals() - returns true if the 2 specified arrays are equal to each other
fill() - assigns the specified value to each element of the specified array
hashCode() - returns a hash code based on the contents of the specified array
mismatch() - finds and returns the index of the first mismatch bewteen arrays
parallelSort() - sorts the specified array into ascending numerical order
sort() - sorts the specified array into order
toString() - returns a string representation of the contents specified in the array

Exercise 6.41

Exercise 6.42

Exercise 6.43

Exercise 6.44

Exercise 6.45

Exercise 6.46

Exercise 6.47

Exercise 6.48
The putIfAbsent(Key, method) method of HashTable class allows the mapping of value to a given
key if the given key is not associated with a value or mapped to null

Exercise 6.49

Exercise 6.50
