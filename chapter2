Exercise 2.1

Exercise 2.2
After printing a ticket, the balance is the amount of money inserted less the ticket price

Exercise 2.3
The ticketmachine takes as much money as you put into it
The ticketmachine will still print a ticket, even if the balance is less than the price of a ticket

Exercise 2.4

Exercise 2.5
The printed ticket looks exactly the same as those printed by the first machine, except the value is different

Exercise 2.6
public class Student
{

}

public class LabClass
{

}

Exercise 2.7
Yes, the class public TicketMachine does not work
The class diagram is now hatched in BlueJ
Error message displayed: <identifier> expected

Exercise 2.8
Yes, the word public can be left out of the class header

Exercise 2.9
No, the word class cannot be left out of the class header

Exercise 2.10
Fields: price, balance, total
Constructors: TicketMachine(int cost)
Methods: getPrice, getBalance, insertMoney, printTicket

Exercise 2.11
The constructor does not have a data type, and states the name of the class

Exercise 2.12
int
Student
Server

Exercise 2.13
alive
tutor
game

Exercise 2.14
Student
Server
Person

Exercise 2.15
Yes, the field must be in the order private int price;

Exercise 2.16
Yes, a semicolon is always required at the end of a field declaration

Exercise 2.17
private int status;

Exercise 2.18
Student

Exercise 2.19
2 parameters - title (type String) and price (type double)

Exercise 2.20
double & String
price would need a decimal number so double can be used
title would need words to be represented so String can be used

Exercise 2.21
public Pet(String petsName)
{
  name = petsName;
}

Exercise 2.22
public Date(String month, int day, int year)
{
}

Exercise 2.23
The getBalance method and the getPrice method are both public members and integer types.
The getBalance method returns the balance field.
The getPrice method returns the price field.

Exercise 2.24
A call to getBalance can be characterised as "What is the balance?"

Exercise 2.25
No, the return statement in the body of the method does not need to be changed.
The name of an accessor method does not need to relate to the name of the field associated with it.

Exercise 2.26
/**
 * Return the total amount of money collected
 */
public int getTotal()
{
  return total;
}

Exercise 2.27
Missing return statement.

Exercise 2.28
The getPrice and printTicket are both public members.
The getPrice is type integer.
The printTicket is type void (does not have a return type).

Exercise 2.29
No, insertMoney and printTicket do not have return types because they have void in the method header

Exercise 2.30
Ticket machine created with price 100.
The getBalance method returns a value of 0.
insertMoney method called with value 50 inputted.
The getBalance method now returns value 50.

Exercise 2.31
The setPrice header does not have TicketMachine in it (the class name).

Exercise 2.32
public void setPrice(int cost)
{
  price = cost;
}

Exercise 2.33
/**
* Increase score by the given number of points.
*/
public void increase(int points)
{
  score += points;
}

Exercise 2.34
Yes, increase changes the state of score therefore it is a mutator.
You could demonstrate it by checking the value of score before and after the increase method is executed.

Exercise 2.35
/**
* Reduce price by the given amount.
*/
public void discount(int amount)
{
price -= amount;
}

Exercise 2.36
My cat has green eyes.

Exercise 2.37
public void prompt()
{
  System.out.println("Please insert the correct amount of money.");
}

Exercise 2.38
The string "price" would be printed rather than the value of price:
# price cents.

Exercise 2.39
The string "# price cents." would be printed (not the fields)

Exercise 2.40
No, the field price is not being called, only strings with text is being printed

Exercise 2.41
public void showPrice()
{
    System.out.println("The price of a ticket is " + price + " cents");
}

Exercise 2.42
ticketMa1 created with cost 100 cents, ticketMa2 created with cost 200 cents
Executing ticketMa1's showPrice method outputs "The price of a ticket is 100 cents"
Executing ticketMa2's showPrice method outputs "The price of a ticket is 200 cents"
The value of price is based on cost, therefore the price method will output the cost that is inputted when each object is created.

Exercise 2.43
There is no longer a prompt to assign a cost to a new TicketMachine object

Exercise 2.44
public TicketMachine()
{
    price = 1000;
    balance = 0;
    total = 0;
}

public TicketMachine(int cost)
{
    price = cost;
}

Exercise 2.45
public void empty()
{
    total = 0;
}
This method does not need to take any parameters. It is a mutator method that is changing the total field to 0.

Exercise 2.46
If the value is positive, then it is added to the balance.
However, if the value is equal to or less than 0, a message is printed asking the user to use a positive amount.

Exercise 2.47
If the user inputs a value of 0 as the amount when the insertMoney method is executed, no error message appears and 0 is added to the balance.

public void insertMoney(int amount)
{
    if(amount >= 0) {
        balance = balance + amount;
    }
    else {
        System.out.println("Use a positive amount rather than: " +
                           amount);
    }
}

Exercise 2.48
public void insertMoney(int amount)
{
    if(amount >= 0) {
        System.out.println("Use a positive amount rather than: " + amount);
    }
    else {
        balance = balance + amount;
    }
}

Exercise 2.49
The boolean field in class figures is isVisible (it controlled the visibility of the circle objects).
Yes, it was well suited to being controlled by a type with only two different values, because the circle object is either visible or not visible.
If the transparency of the circle was to be a scale from 1 - 100, then a boolean type would not be suitable.

Exercise 2.50
In the printTicket method, Code 2.1 makes the balance 0, where Code 2.8 reduces the balance by the price of a ticket
(given the balance is high enough for a ticket to be printed)
Furthermore, Code 2.1 updates the total to total + balance, where Code 2.8 updates the total to total + price
(represents the total value of printed tickets)

Exercise 2.51
The code still compiles with the else block removed from the printTicket method
BlueJ does nothing if a ticket is printed without inserting any money

Exercise 2.52
No, the if statement checks that balance is >= price before another ticket is printed, therefore balance cannot be changed to a negative value

Exercise 2.53
(arithmetic operators shown in Appendix C)

Exercise 2.54
saving = price * discount;

Exercise 2.55
mean = total / count;

Exercise 2.56
if (price > budget)
{
  System.out.println("Too expensive");
}
else
{
  System.out.println("Just right");
}

Exercise 2.57
if (price > budget)
{
  System.out.println("Too expensive, the budget is " + budget / 2);
}
else
{
  System.out.println("Just right");
}

Exercise 2.58
The refundBalance does not record the amount to refund before it changes the balance to 0
To test this method, replace the original refundBalance method with the new method and compare the execution of the method

Exercise 2.59
TicketMachine does not compile. The balance field cannot be changed to 0 after the refundBalance method has returned a value for balance.

Exercise 2.60
Yes, TicketMachine still compiles. However, price is equal to 0 when inspected.
By adding "int" before "price", it is changed to a local variable, so it will not record the value of cost once the object is created.

Exercise 2.61
public int emptyMachine()
{
    int emptyTotal = total;
    total = 0;
    return emptyTotal;
}

Exercise 2.62
public void printTicket()
{
  int amountLeftToPay;
  amountLeftToPay = price - balance;
        
  if(amountLeftToPay <= 0) {
    // Simulate the printing of a ticket.
    System.out.println("##################");
    System.out.println("# The BlueJ Line");
    System.out.println("# Ticket");
    System.out.println("# " + price + " cents.");
    System.out.println("##################");
    System.out.println();

    // Update the total collected with the price.
    total = total + price;
    // Reduce the balance by the price.
    balance = balance - price;
  }
  else {
  System.out.println("You must insert at least: " + amountLeftToPay + " more cents.");
                    
  }
}

Exercise 2.63
Another method for the discounted ticket needs to be added, which means another field for the discounted price needs to be added.
New field added:
private int discount;

Constructor modified:
public TicketMachine(int cost, int concession)
{
  price = cost;
  balance = 0;
  total = 0;
  discount = concession;
}

New method added:
public void printDiscountedTicket()
{
  int amountLeftToPay;
  amountLeftToPay = discount - balance;
        
  if(amountLeftToPay <= 0) {
    // Simulate the printing of a ticket.
    System.out.println("##################");
    System.out.println("# The BlueJ Line");
    System.out.println("# Ticket");
    System.out.println("# " + discount + " cents.");
    System.out.println("##################");
    System.out.println();

    // Update the total collected with the price.
    total = total + discount;
    // Reduce the balance by the price.
    balance = balance - discount;
  }
  else {
    System.out.println("You must insert at least: " + amountLeftToPay + " more cents.");
                    
  }
}


Exercise 2.64
Name: getCode
Return type: String

Exercise 2.65
Method name: setCredits
Parameter name: creditValue
Parameter type: int

Exercise 2.66
public class Person
{
  //insert code here
}

Exercise 2.67
private String name;
private int age;
private String code;
private int credits;

Exercise 2.68
public Module(String moduleCode)
{
  code = moduleCode;
}

Exercise 2.69
public Person(String myName, int myAge)
{
  name = myName;
  age = myAge;
}

Exercise 2.70
The return type cannot be void:
public int getAge()
{
return age;
}

Exercise 2.71
public String getName()
{
  return name;
}

Exercise 2.72
public void setAge(int newAge)
{
  age = newAge;
}

Exercise 2.73
public void printDetails()
{
  System.out.println("The name of this person is " + name);
}

Exercise 2.74
student1
Student
fullName: Benjamin Johnson
studentID: 738321

Exercise 2.75
Henr557

Exercise 2.76
Error - StringIndexOutOfBoundsException (length is 3 but end is 4)

Exercise 2.77
public Student(String fullName, String studentID)
{
    if (fullName.length() < 4)
    {
        System.out.println("Error, name is too short.");
        name = fullName;
    }
    else
    {
        name = fullName;
    }
    if (studentID.length() < 3)
    {
        System.out.println("Error, ID is too short.");
        id = studentID;
    }
    else
    {
    id = studentID;            
    }

    credits = 0;
}

Exercise 2.78
public String getLoginName()
{
    if (name.length() < 4 && id.length() >=3)
    {
        return name + id.substring(0,3);
    }
    else if (id.length() < 3 && name.length() >= 4)
    {
        return name.substring(0,4) + id;
    }
    else
    {
        return name + id;
    }
}

Exercise 2.79
99 + 3 = 102 (int)
"cat" + "fish" = "catfish" (String)
"cat" + 9 = "cat9" (String)
9 + 3 + "cat" = "12cat" (String)
"cat" + 3 + 9 = "cat39" (String)
"catfish".substring(3,4) = "f" (String)
"catfish".substring(3,8) = error, string index out of bounds

Exercise 2.80
t1.getBalance returns 0 (int) after object t1 is created.
t1.getBalance returns 500 after t1.insertMoney(500) is executed.

Exercise 2.81
t2.getBalance() = 500 (int)

Exercise 2.82
t2.getBalance = 1000 (int)
The field t2 is equal to the value of t1, so when 500 was inserted into t1, it added to the existing 500.

Exercise 2.83
public String getAuthor()
{
    return author;
}

public String getTitle()
{
    return title;
}

Exercise 2.84
public void printAuthor()
{
    System.out.println("The author of this book is " + author);
}

    public void printTitle()
{
    System.out.println("The title of this book is " + title);
}

Exercise 2.85
public Book(String bookAuthor, String bookTitle, int bookPages)
{
  author = bookAuthor;
  title = bookTitle;
  pages = bookPages;
}

public String getAuthor()
  {
    return author;
  }
    
public int getPages()
  {
    return pages;
  }
    
public String getTitle()
  {
    return title;
  }

Exercise 2.86
Yes, the Book objects are immutable because there are no mutator methods in the current program to change their value

Exercise 2.87
public void printDetails()
{
    System.out.println("Title: " + title + ", Author: " + author + ", Pages: " + pages);
}

Exercise 2.88
refNumber = "";

public String getRefNumber()
{
    return refNumber;
}

public void setRefNumber(String ref)
{
    refNumber = ref;
}

Exercise 2.89
public void printDetails()
{
    if (refNumber.length() > 0)
    {
        System.out.println("Title: " + title + ", Author: " + author + ", Pages: " + pages + ", Reference Number: " + refNumber);
    }
    else
    {
        System.out.println("Title: " + title + ", Author: " + author + ", Pages: " + pages + ", Reference Number: ZZZ");        
    }
}

Exercise 2.90
public void setRefNumber(String ref)
{
    if (ref.length() >= 3)
    {
        refNumber = ref;
    }
    else
    {
        System.out.println("Error, reference number must be at least 3 characters");
    }
}

Exercise 2.91
private int borrowed;

public Book(String bookAuthor, String bookTitle, int bookPages)
{
    author = bookAuthor;
    title = bookTitle;
    pages = bookPages;
    refNumber = "";
    borrowed = 0;
}

public int getBorrowed()
{
    return borrowed;
}

public void printDetails()
{
    if (refNumber.length() > 0)
    {
        System.out.println("Title: " + title + ", Author: " + author + ", Pages: " + pages + ", Reference Number: " + refNumber);
        System.out.println("This book has been borrowed " + borrowed + " times");
    }
    else
    {
        System.out.println("Title: " + title + ", Author: " + author + ", Pages: " + pages + ", Reference Number: ZZZ");
        System.out.println("This book has been borrowed " + borrowed + " times");
    }
}

public void borrow()
{
    borrowed += 1;
}

Exercise 2.92
private boolean courseText;

public Book(String bookAuthor, String bookTitle, int bookPages, boolean textBook)
{
    author = bookAuthor;
    title = bookTitle;
    pages = bookPages;
    refNumber = "";
    borrowed = 0;
    courseText = textBook;
}

public boolean isCourseText()
{
    return courseText;
}

Exercise 2.93
public class Heater
{
    private double temperature;

    public Heater()
    {
        temperature = 15.0;
    }

    public void warmer()
    {
        temperature += 5;
    }
    
    public void cooler()
    {
        temperature -= 5;
    }
    
    public double currentTemp()
    {
        return temperature;
    }
}

Exercise 2.94
public class Heater
{
    private double temperature;
    private double min;
    private double max;
    private double increment;

    public Heater(double minTemp, double maxTemp)
    {
        temperature = 15.0;
        min = minTemp;
        max = maxTemp;
        increment = 5.0;
    }

    public void warmer()
    {
        if (temperature < max)
        {
            temperature += increment;
        }
    }
    
    public void cooler()
    {
        if (temperature - increment >= 0)
        {
            temperature -= increment;
        }
    }
    
    public double currentTemp()
    {
        return temperature;
    }
    
    public void setIncrement(double inc)
    {
        increment = inc;
    }
}