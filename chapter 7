Exercise 7.1
The busiest times of the day are hour 10, 14, and 18

Exercise 7.2
private Person[] people;

Exercise 7.3
private boolean[] vacant;

Exercise 7.4

Exercise 7.5
int[] counts; - the square brackets should be after the variable type
boolean[] occupied; - the size of the array is declared in the object constructor

Exercise 7.6
readings = new double[60];
urls = new String[90];
machines = new TicketMachine[5];

Exercise 7.7
One object named labels is created that can store 20 String objects

Exercise 7.8
double prices = new double[50]; - the brackets should be square brackets

Exercise 7.9
java.lang.ArrayIndexOutOfBoundsException

Exercise 7.10
public void printHourlyCounts()
{
    System.out.println("Hr: Count");
    int hour = 0;
    while (hour < hourCounts.length)
    {
        System.out.println(hour + ": " + hourCounts[hour]);
        hour++;
    }
}

Exercise 7.11
/**
* Print all the values in the marks array that are
* greater than mean.
* @param marks An array of mark values.
* @param mean The mean (average) mark.
*/
public void printGreater(double[] marks, double mean)
{
    for(int index = 0; index < marks.length; index++)
    {
        if(marks[index] > mean)
        {
            System.out.println(marks[index]);
        }
    }
}

Exercise 7.12

Exercise 7.13

Exercise 7.14

Exercise 7.15

Exercise 7.16

Exercise 7.17

Exercise 7.18

Exercise 7.19

Exercise 7.20

Exercise 7.21

Exercise 7.22

Exercise 7.23

Exercise 7.24
A series of asterisks is shown on the screen

Exercise 7.25
The reset method starts the asterisks at 1, the same output is shown if the run method is executed with the same integer value

Exercise 7.26
static void	fill (int[] a, int val) Assigns the specified int value to each element of the specified array of ints.
static void fill (int[] a, int fromIndex, int toIndex, int val) Assigns the specified int value to each element of the specified range of the specified array of ints.

The fill methods are useful to reset the output of the Automaton class to one asterisk

Exercise 7.27
The same pattern emerges at each of the starting cells
Yes, each starting state results in the same pattern i.e. when the reset method is called, Automaton displays one asterisk again

Exercise 7.28
(i == 0) ? (left = 0) : (left = state[i - 1]);
(i + 1 < state.length) ? (right = state[i + 1]) : (right = 0);

Exercise 7.29
To enable the current state to be updated, a temporary variable needs to be used
because the next state is dependent on the current state

Exercise 7.30

